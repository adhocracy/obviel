After todos review:

* removeFromArray test

* todo app spurious submits:

  * when selecting all items, an 'update' event is sent for the first entry.


* the todo app is sending spurious updates due to UI state being maintained
  in the objects and handled with mutator. How to solve?

* the combiner and the transformer run when the session is committed.
  but what if touched() style functions are called after the session
  was committed? Do we want to clear the session anyway at this point?

* a way to affect the URL used, at least to add parameters. This can 
  be a result of a target transformation.

* todos app shouldn't store UI state information.

* todos app is triggering session commit even when clicking on 
  checkboxes. That wouldn't be so bad but there are actual items to commit!

* todo is also causing a processTarget when the app is loading. Is
  that the refresh?

* todo app doesn't allow clearing up everything after you press 'mark
  everything as done'.

* go through todo app mapping configuration and see what could be defaults,
  for instance the finder that finds the root?

* source events from socket io not implemented yet

* we should be able to define transport specific events. These will be
  fired in addition to the action related events. This means the session
  needs to be in charge of getting the config, and the connection should
  be in charge of getting the transport-specific events.

* how does source add and remove find the container? based on obj added,  
  or based on container id.

* want a refresh action that does not POST previous contents but uses
  an id to indicate what to refresh (or no message from server).  Can
  do it with transformer now but a bit icky as a default. refresh can
  be done by id and by url. how to configure?

* right now source based container actions use the 'containerIface'
  property to find the container information. Can this be made more
  flexible, i.e on the basis of the obj added (trajectParent, or iface
  + id, or something else)

* need to make sure that missing source target information doesn't give
  errors now that events have been introduced.

* test for events

* finish local storage connection (something works)

* how to make sure stats are updated correctly in todos app?

* how to make sure iface is removed when syncing to localstorage? transformer?

* how to turn off auto-commit? automatic commit during event handling
  is not what the developer wants in some cases where multiple clicks
  are required to result in a single update, where the first click
  already puts stuff in the session. 

* aborting commit. This implies that the session needs the inverse of
  add, update, remove to remove an object from session. or at least
  something like session.forget(obj).

* we need a way to turn a model object into a JSON before sending it; i.e.
  work with non-pure-json objects as models. a transformer can do it.

* a more general 'init' which also sets up i18n, renders first view.

* without an 'init' it is not possible to create a 'session'. this because we 
  need to know that the root object is there and loaded. enable this code
  and see what happens to the tests. Or can we do without init too and just
  have better error reporting in the case an init was intended but didn't work?

* if we add something, then do an update in a sub-object in it, that
  should not be an update event to the server. But how would we know
  it's a sub-object that was added? same with removing something and
  doing an update in a sub-object.  how do we know that update is
  useless?

* could multiple updates be consolidated in a single action as well?

* is delete supportable in the face of removing things from arrays? we 
  don't know the parent.. the opposite would be 'create', but that makes
  no sense either. We *could* support a 'add to object' and 'remove from obj'
  operation however, i.e. obj.create('foo', {}) and obj.del('foo');

* remove from an array; is it really the inverse of delete. Can you really 
  not refresh a removed item? This depends on whether 'removal' means
  removal from the tree entirely, or removal from an array.

* general per-backend configuration. it should always be possible to
  configure or override what's defined for an action specific to the backend.
  this should override the general configuration.

* how do we do source events with socket? I.e. a particular event
  is interpreted as an 'update'. We can inspect the iface of the incoming
  object to determine what's going on for an update, but what for 
  add or removing? we need a mapping from event name to event.

  this implies a 'socket' data structure for source, where we have simply
  the way to name the type of incoming event. as a result, those events will
  be processed that way. This is different from how http responses are
  processed, where we specify in the target what we want to do with the
  response handler (which in turn will typically use the source configuration).

* using the session again after a commit; wipe the slate clean?

* rollback for session so we can actually rollback the local situation? this
  would need actions to retain previous information, in particular for
  update.

* version protocol support.

Obviel general:

* Review IE 8 compat stuff (also docs) in the light of 
  http://hsivonen.iki.fi/doctype/

* review body.html concernign <script> tags, are these still needed?

* using 'this.source' in key generation for InlineSourceLoader seems
  inefficient.

* factor out obviel-core.js from obviel. then make obviel be the thing
  that glues the bits together and depends on the rest of the obviel-*
  packages. (or offers a dummy, in case of i18n, or offer failing API
  in case of sync bits that are attached to view?).

* create minified bundled version for download which includes everything.

* split core out of obviel.js, and make obviel.js the front-end to pull
  in obviel core, template, sync, etc in an integrated way. currently
  obviel.js is both with optional integration.

* the connection needs to distinguish between actions. 





