==========
Obviel API
==========

.. default-domain:: js

Obviel core
===========

.. function:: iface(name[, *bases])

  Declare an iface.

  :param string name: A unique string identifying the iface.  
  :param `*bases`: Optional extra iface strings that are interpreted
    as base ifaces that this iface extends.

  Register an iface with the name ``name``. Note that declaring
  an iface is not required in order to use it; you can just refer
  to any iface, declared or not, by name. 

  A registered iface always automatically extends a special iface
  ``base``.

.. function:: provides(obj, base)
 
  Check whether an object provides an iface.

  :param obj: Any JavaScript object.
  :param string base: A string identifying an iface.
  :returns: ``true`` if obj provides iface ``base`` (or an
    iface that extends ``base``.

.. function:: extendsIface(name, base)

  Register a new base iface for an iface.

  :param string name: Identifies the iface to extend.
  :param string base: Identifies the base iface that this iface extends.

.. function:: ifaces(obj)

  Obtain all ifaces that this object provides, going recursively
  through base interfaces, breadth first.

  If no ``ifaces`` attribute is available, the JS type of the object
  is returned instead.
  
  :param obj: Any JavaScript object
  :returns: a list of ifaces that the obj provides.

.. class:: View(settings)
 
  :param settings: an object of which the properties will become
     properties of the view itself.

  You can create a View by instantiating one and then registering it
  with :func:`view`, but that function also allows creation of a new
  view directly from a settings object.

  If you want to create your own view types that provide more
  features particular to specific use cases, you should derive your
  view from the ``View`` class.  One example of this is :class:`Widget`
  from the Obviel forms library.

  XXX expand with typical settings

.. function:: View.render()

  This function will be called by Obviel when the view is being
  rendered. It is supplied by the programmer.

.. function:: View.cleanup()

  This function will be called by Obviel when the view is being
  cleaned up, either explicitly by using :func:`element.unview()`, or
  implicitly because a new view is being rendered on the same element. It
  is supplied by the programmer.

.. function:: view(view)

  Register a view with Obviel. This allows Obviel to look up the view
  for the ``iface`` with which the view was registered.

  :param view: a view object to register with Obviel. As a
    convenience, you can also provide a bare JavaScript object, which
    will be converted to a :class:`View` object with the object's
    properties.

.. function:: element.render(obj[, name, callback, errback])

  Render a view for an object on a jQuery element. This instantiates a
  view by cloning it from the registered view and then calls its
  :func:`View.render` method.
    
  :param obj: The JavaScript object to render. Alternatively this
     can be a string, which will then be interpreted as a URL. The
     URL will be fetched and the resulting JSON object will be
     the object to render.
  :param name: The name of the view to render for the object. If
     not supplied the name ``default`` will be used.
  :param callback: A callback function to call when the rendering
     has been completed. ``this`` will be the view instance
     that was used for the rendering.
  :param errback: currently not supported.

  All methods of the :class:`View` object will have access to the
  following properties on ``this`` during rendering:

  * ``el``: the jQuery element that the view is being rendered on.

  * ``obj``: the object being rendered.

  * ``callback``: the callback function, if supplied.
  
  * ``errback``: the errback function, if supplied.

  * ``registry``: the :class:`Registry` in which the view was
     looked up.

.. function:: element.rerender([callback, errback])

.. function:: element.view()

.. function:: element.parent_view()

.. function:: element.unview()

View options
++++++++++++

Views have a number of options you can pass into them in the
``settings`` parameter.

.. attribute:: iface

  The iface (a string) for which the view is registered. The view will
  only be looked up on objects that provide the given ``iface``.

  While it is optional and defaults to registering the view for all
  JavaScript objects, you would almost always want to supply an
  ``iface`` property to a view.

.. attribute:: name

  The name of the view. It is optional, and defaults to
  ``default``. The name is used when a view is looked up, along with
  the iface, but for lookup also the default name is ``default``. The
  difference between name and iface during lookup that iface is
  provided from the object being rendered, while the name is provided
  by the calling code as an argument to ``render``.

.. attribute:: render
 
  A function which will be added as a method to the view. In it, the
  developer can refer to ``this.obj`` to access the object the view is
  rendering, and ``this.el`` to access the jQuery DOM element on which
  the view is rendering. The ``el`` property is typically manipulated
  in the ``render`` method to make the view actually do something.

  Supplying a ``render`` method is optional.

.. attribute:: cleanup

  An optional cleanup function which will be called when the
  (non-ephemeral) view is being cleaned up from the element it was
  rendered on, either explicitly because :func:`element.unview` was
  called on it, or implicitly because something else is being 
  rendered on the element.

.. attribute:: ephemeral

  A boolean value. By default it is ``false``. If set to ``true``,
  the view will not be associated with the element. This is useful for 
  views that are not really associated with the DOM, such as popup
  messages or views that redirect to other views.

.. attribute:: html

  A string with a snippet of HTML that should be inserted into the DOM
  upon rendering. This will be done before any :func:`View.render()`
  function is called.

  This property is optional, and by default there will be no HTML snippet
  insertion.

.. attribute:: html_url
 
  A string with a URL to a resource with a HTML snippet in it. This
  HTML snippet will be loaded if the URL has not been previously seen,
  otherwise it is retrieved from a cache. The HTML snippet is
  inserted into the DOM as with :attr:`html`.

  This property is optional.

.. attribute:: jsont

  A string with a JSON template. The template is rendered with the
  object being rendered as the context, and the resulting HTML snippet
  is inserted into the DOM as with :attr:`html`.
 
  This property is optional.

.. attribute:: jsont_url

  A URL referencing a resource that is a JSON template. This
  template will be loaded if the URL has not been previously seen,
  otherwise it is retrieved from a cache. The HTML snippets that
  results from rendering the template will be inserted into the DOM
  as with :attr:`html`.

  This property is optional.

.. attribute:: subviews

  A JavaScript object literal describing subviews of this view.  Each
  property name define a jQuery selector that will be issued on the
  element being rendered by the outer view that is being rendered. The
  resulting elements will be have the sub view rendered on them. The
  property value identifies a property on the model object that is
  being rendered. This property is accessed: if it is a sub object, it
  will be rendered directly. If it is a string, this string is
  interpreted as a URL identifying the object to be rendered, as with
  :func:`element.render`.

  To render a named subview, use a property value that is an array
  instead: the first item is interpreted as the property name
  identifying the subobject or URL to be rendered, and the second item
  is the view name to use to look up the subview.

.. attribute:: events

  a JavaScript object literal describing event handlers to hook up 
  for this view. Each property name is the name of the event, such as
  ``click``. The property value is either a function or a string. 

  If it is a function, this function is the event handler. It will
  receive a single parameter that is the event. The event object has a
  ``view`` property that you can use to access the view that issued
  the event.

  If it is a string, this is used to identify a method of the view
  that is the event handler. This method also receives a parameter
  ``ev`` that has a ``view`` property, but the view can in this case
  also be accessed as ``this``.
 
