Internationalizing your Project
===============================

Introduction
------------

You have a project that uses Obviel for its user interface, and now
you want it to work in multiple languages. For this you need to adjust
your application to support multiple languages, a process known as
"internationalization", or "i18n" for short (as "internationalization"
has 18 letters between the 'i' and the 'n').

How do you go about this? 

The idea is that you mark up all translatable texts in your project's
code (``.js`` and ``.obvt`` files) in a special way. When your
application runs, marked text is looked up in a translation source.
If a translation is found for a marked up piece of text, it is used
instead of the original text. By changing the locale you can change
which translation sources are in use.

A special extraction tool can be used to extract the marked up pieces
of text from ``.js``, ``.html`` and ``.obvt`` files, so that they can
be given to human translators for translation.

Now let's go into some more detail.

JavaScript i18n
---------------

Imagine we have this piece of JavaScript code we want to i18n::

  alert("Hello world!");

This application has been written with one language in mind, in this
case English. Now we want to modify the application so that if the
application runs with another language (for instance French) we will
see the popup in that language (for instance "Bonjour monde!")
instead of in English.

You can make this happen using ``obviel.i18n``. This uses the gettext_
approach, which is very often used for i18n for a variety of projects
and programming languages. ``obviel.i18n`` is built on top of
jsgettext_, so include ``jsgettext`` like this::

    <script type="text/javascript" src="/path/to/Gettext.js"></script>

.. _gettext: https://en.wikipedia.org/wiki/Gettext

.. _jsgettext: http://jsgettext.berlios.de/

We now need to make a translation source available for our ``Hello
world!`` message. This is what that looks like::

  var fr_FR = obviel.i18n.translation_source(
    {'Hello world!': 'Bonjour monde!'});
  obviel.i18n.register_translation('fr_FR', fr_FR);

Here we create a translation source from a simple JavaScript object
using ``translation_source``, and then register this source using
``register_translation``. Later we'll see how to register translations
from a JSON source.

Next we will create a function ``_`` that can be used to mark up text
to make it translatable::

  var _ = obviel.i18n.translate();

We do this for a domain, in this case we are using the ``default`` domain
so we don't need to specify one. Alternatively you can explicitly specify
the ``default`` domain like this::

  var _ = obviel.i18n.translate();

The idea is that we use ``obviel.i18n.translate()`` once on top of each
of the modules we want to i18n. Later we'll go into more detail about
the use of different domains.

Now let's return to our JavaScript code to i18n::

  alert("Hello world!");

We adjust it to use our ``_`` function::

  alert(_("Hello world!"));

When you run your application now, you'll see "Bonjour monde!".

`Here <_static/demo/i18n-js-demo.html>`_ is a demo that has put all
this together in a slightly more involved way.

Extracting translatable content
-------------------------------

We now know how to mark up our JavaScript code so it can be
translated. We need a tool that can extract all pieces of marked up
text automatically so that we can give it all to a translator.

We recommend the use of the Babel_ i18n tool with code that uses
Obviel. While Babel primarily written to support i18n of Python
applications, it also supports JavaScript applications.

.. _Babel: http://babel.edgewall.org/

.. sidebar:: why ``babel extract`` and not ``xgettext``?

  ``xgettext`` is the standard GNU gettext tool to extract message ids
  from JavaScript code. Unfortunately this tool still does not have
  native support for JavaScript. The ``C`` extractor comes pretty
  close, but JavaScript code needs some preprocessing (into fake C
  code) before it's safe to use this.

  There is a tool for this based on the same code as used in the
  Django web framework, called jslex_. When you install it you'll have
  a script available called ``jslex_prepare`` that can be used to
  preprocess ``.js`` to make them safe for ``xgettext``. This is
  pretty cumbersome, so just use Babel instead if you can. 

  Plus you'll get to use the plugin for Babel to extract translatable
  content from ``.obvt`` files too!

  We do use the standard GNU gettext ``msginit`` and ``msgmerge``
  however.

  .. _JsLex: http://pypi.python.org/pypi/jslex

If you're on Linux, ``Babel`` may be available in your Linux
distribution. You can also install it manually using one of the Python
tools used for this (``pip``, ``easy_install``, or
``buildout``). After installation, a ``pybabel`` commandline tool will
be available.

To make Babel work with ``.js`` files we first need to configure
it. Create a ``.cfg`` file with the following content::

  [javascript: **.js]
  extract_messages = _

Now you can use it on your project directory::

  $ pybabel extract -F myconfig.cfg project_directory > myproject.pot

You will now have a ``myproject.pot`` (PO template) file that will be
the template for all the actual translation files for your
application, the ``.po`` files. For example, if you had applied this
to the demo described above, you would get a ``.pot`` file like this
(skipping some metadata boilerplate)::

  #: src/demo/i18n-js-demo.js:15
  msgid "Hello world!"
  msgstr ""

In the comment line it points out where in the code the text to
translate was found; this is sometimes useful context for translators.

Creating ``.po`` files
----------------------

For each language that you want to support in your project, you now
need to create a ``.po`` file from the project's ``.pot`` file. You
can do this with the GNU gettext tool suite, using the ``msginit``
tool (`details about msginit`_)::

 $ msginit -l fr_FR -i myproject.pot -o myproject-fr_FR.po

.. _`details about msginit`: https://www.gnu.org/savannah-checkouts/gnu/gettext/manual/html_node/msginit-Invocation.html

.. sidebar:: Why ``msginit`` and not ``pybabel``?

  The ``pybabel init`` command does much the same as ``msginit`` from
  the GNU gettext tools, but unfortunately it has various assumptions
  built in concerning a standard gettext directory structure that are
  not used when internationalizing a JavaScript application, and it
  seems to be difficult to turn these assumptions off. ``msginit``
  does let us do what we want. (if you can figure out how to use
  ``pybabel init`` for this purpose, let us know!)

This command says we want to create a specific ``.po`` file for the
French language locale (``fr_FR``). This is what the generated ``.po``
file looks like::

  #: src/demo/i18n-js-demo.js:15
  msgid "Hello world!"
  msgstr ""

This is in fact very similar to our ``.pot`` file!

We can now edit the file to add the French translations::

  #: src/demo/i18n-js-demo.js:15
  msgid "Hello world!"
  msgstr "Bonjour monde!"

In practice, you would likely give this file to someone else: the
person translating the application to French. They can then edit it
directly to add or update the translations, or use some GUI tool that
can work with ``.po`` files. When they are done, they would give the
file back to you.

Updating ``.po`` files
----------------------

When your project evolves, you will likely add new texts to translate,
or change or remove existing ones. You can use the ``babel extract``
tool as usual to extract a new ``.pot`` file containing all the
current translation texts. You can then use the GNU gettext
msgmerge tool (details_) to update your existing ``.po`` files so that the
new translatable texts become available to your translators::
   
  $ msgmerge -U myproject-fr_FR.po myproject.pot

.. _details: https://www.gnu.org/savannah-checkouts/gnu/gettext/manual/html_node/msgmerge-Invocation.html
 
Creating ``.json`` files from the ``.po`` files
-----------------------------------------------

We now have a ``.po`` file with the right translations. To make it
work with Obviel i18n, we need to convert it to a JSON file that can
be used as a translation source. You can do this using the pojson_
tool (installable using one of the Python methods such as ``pip``,
``easy_install`` or ``buildout``).

.. _pojson: http://pypi.python.org/pypi/pojson

Using pojson you can convert the ``.po`` file to a simple ``.json``
file::

  $ bin/pojson convert myproject-fr_FR.po > myproject-fr_FR.json

Loading up the translation JSON
-------------------------------

Put that ``.json`` file somewhere where it can be found. Normally that
would be in the same directory as the ``.js`` files.

This ``.json`` file can now be loaded as a translation source from a
URL::

  var fr_FR = obviel.i18n.translation_source_from_json_url(
     'myproject-fr_FR.json');

And we can register it::

  obviel.i18n.register_translation('fr_FR', fr_FR);

Translating ``.obvt`` files
---------------------------

We've now demonstrated the procedure for a ``.js`` file, but what
about Obviel Template ``.obvt`` files? We provide a plugin to Babel
called ``babel-obviel`` that knows how to extract translatable text
from ``.obvt`` files. You install it using the standard Python
installation tools. Make sure it is installed in the same Python as
Babel is, so that Babel can pick up on it.

Imagine you have this template, marked up for translation::

  <p data-trans="">Hello world!</p>

We need to teach ``pybabel extract`` about ``.obvt`` files in the
``.cfg`` file we created before::

  [javascript: **.js]
  extract_messages = _

  [obvt: **.obvt]

When you now run ``pybabel extract`` on your project, it will extract
translatable texts not only from ``.js`` files but from ``.obvt``
files as well.

Read :doc:`Obviel Template i18n <template_i18n>` for much more detail
on how to mark up your ``.obvt`` files for i18n.

Translating Obviel templates in ``.html`` files
-----------------------------------------------

It is possible to embed an Obviel template in a ``script`` tag in a
HTML file. You can tell ``pybabel`` to extract from these too, by
modifying the ``.cfg`` file to read like this::

  [javascript: **.js]
  extract_messages = _

  [obvt: **.obvt]

  [obvt_html: **.html]

Variables
---------

Obviel Template supports the use of variables within ``data-trans``
sections, like this::

  <p data-trans="">Hello {who}!</p>

or like this for variables within elements::

  <p data-trans="">Hello <em data-tvar="who">{who}</em>!</p>

If you used ``pybabel extract``, this is what these texts would look
like in the ``.po`` file::

  Hello {who}!

The translator now needs to take care to include this variable in the
translation as well::

  Bonjour {who}!

A translator could decide it makes more sense to move the variable to
another place as well::

  {who}, bonjour!

Obviel Template's i18n system will use these variables automatically.
To use such variables in a ``.js`` file, you can use a special
:func:`variables` formatting function that Obviel i18n makes
available::

  obviel.i18n.variables(_("Hello {who}!"), { who: "Bob" });

Note that for ``variables`` to work you do need to include
``obviel-template.js`` on the page as well.

  





